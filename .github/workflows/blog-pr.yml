name: Auto Create Blog Post PR
on:
  issues:
    types: [opened, edited]
jobs:
  create-blog-pr:
    permissions: write-all
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'Blog Creation')
    steps:
      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            type -p curl >/dev/null || apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
          
          # Authenticate GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract Inputs from Issue Body and Create Blog Post
        id: extract
        shell: bash
        run: |
          pip install numpy
          
          # Save the issue body into a variable
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "Issue body:"
          echo "$ISSUE_BODY"
          
          extract_field() {
            local header="$1"
            # Find the section and extract all content until the next ###
            echo "$ISSUE_BODY" | awk -v header="### $header" '
              BEGIN { found=0; content=""; }
              $0 ~ header { found=1; next; }
              found && $0 ~ /^###/ { found=0; }
              found && !/^[0-9]+$/ { gsub(/^[0-9]+/, ""); content=content"\n"$0; }
              END { gsub(/^\n+/, "", content); gsub(/\n+$/, "", content); print content; }
            ' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
          }
          
          # Using the raw issue title
          BLOG_TITLE="${{ github.event.issue.title }}"

          BLOG_TITLE=$(echo "$BLOG_TITLE" | sed 's/^\[New Post\][[:space:]]*//')
          BLOG_FILE_PATH=$(extract_field "File Path Name")
          BLOG_AUTHORS=$(extract_field "Author")
          BLOG_TAGS=$(extract_field "Tags")
          BLOG_CATEGORY=$(extract_field "Category")
          BLOG_AUDIENCE=$(extract_field "Audience")
          BLOG_KVP=$(extract_field "Key Value Proposition")
          BLOG_KEYWORDS=$(extract_field "Keywords")
          BLOG_DESCRIPTION=$(extract_field "Description")
          BLOG_AMD_TECHNICAL_BLOG_TYPE=$(extract_field "AMD Technical Blog Type")
          BLOG_AMD_APPLICATIONS=$(extract_field "AMD Applications")
          BLOG_HARDWARE_DEPLOYMENT_TARGETS=$(extract_field "AMD Hardware Deployment Platforms")
          BLOG_SOFTWARE_DEPLOYMENT_TARGETS=$(extract_field "AMD Software Deployment Platforms")
          BLOG_JIRA=$(extract_field "Jira Ticket")
          
          echo "Blog Title: $BLOG_TITLE"
          echo "Blog File Path: $BLOG_FILE_PATH"
          echo "Blog Author(s): $BLOG_AUTHORS"
          echo "Blog Tags: $BLOG_TAGS"
          echo "Blog Category: $BLOG_CATEGORY"
          echo "Blog Audience: $BLOG_AUDIENCE"
          echo "Blog Key Value Proposition: $BLOG_KVP"
          echo "Blog Keywords: $BLOG_KEYWORDS"
          echo "Blog Description: $BLOG_DESCRIPTION"
          echo "Blog AMD Technical Blog Type: $BLOG_AMD_TECHNICAL_BLOG_TYPE"
          echo "Blog AMD Applications: $BLOG_AMD_APPLICATIONS"
          echo "Hardware Deployment Targets: $BLOG_HARDWARE_DEPLOYMENT_TARGETS"
          echo "Software Deployment Targets: $BLOG_SOFTWARE_DEPLOYMENT_TARGETS"

          # Check for empty required fields
          VALIDATION_ERRORS=""
          VALIDATION_PASSED="true"
          REQUIRED_FIELDS=("BLOG_TITLE:Title" "BLOG_AUTHORS:Author" "BLOG_TAGS:Tags" "BLOG_CATEGORY:Category" 
                          "BLOG_AUDIENCE:Audience" "BLOG_KVP:Key Value Proposition" "BLOG_KEYWORDS:Keywords" 
                          "BLOG_DESCRIPTION:Description")
          
          for field_info in "${REQUIRED_FIELDS[@]}"; do
            IFS=':' read -r field_var field_name <<< "$field_info"
            field_value="${!field_var}"
            # Trim whitespace from the field value
            field_value=$(echo "$field_value" | xargs)
            
            if [ -z "$field_value" ]; then
              VALIDATION_ERRORS+="- Missing required field: $field_name\n"
              VALIDATION_PASSED="false"
            else
              echo "Field $field_name is present: '$field_value'"
            fi
          done

          echo "validation_passed=$VALIDATION_PASSED" >> $GITHUB_OUTPUT
          
          if [ "$VALIDATION_PASSED" = "false" ]; then
          
            echo "validation_errors<<EOF" >> $GITHUB_OUTPUT
            echo -e "$VALIDATION_ERRORS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

          else
            echo "All validations passed successfully!"

            PR_EXISTS=$(gh pr list --search "${{ github.event.issue.number }} in:title" --state open --json number | jq length)
            if [ "$PR_EXISTS" -gt "0" ]; then
              echo "create_pr=false" >> $GITHUB_OUTPUT
            else
              echo "create_pr=true" >> $GITHUB_OUTPUT
            fi
          fi

          CURRENT_DATE=$(date "+%b %d, %Y")
          echo "Current date: $CURRENT_DATE"

          if [ "$VALIDATION_PASSED" = "true" ]; then
            python3 scripts/create_blog_post.py "$BLOG_TITLE" "$BLOG_FILE_PATH" "$BLOG_AUTHORS" "$BLOG_TAGS" "$BLOG_CATEGORY" "$BLOG_AUDIENCE" "$BLOG_KVP" "$BLOG_KEYWORDS" "$BLOG_AMD_TECHNICAL_BLOG_TYPE" "$BLOG_AMD_APPLICATIONS" "$BLOG_DESCRIPTION" "$BLOG_HARDWARE_DEPLOYMENT_TARGETS" "$BLOG_SOFTWARE_DEPLOYMENT_TARGETS"
          fi
          
          echo "blog_title=$BLOG_TITLE" >> $GITHUB_OUTPUT
          echo "current_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "jira_ticket=$BLOG_JIRA" >> $GITHUB_OUTPUT

      - name: Create error comment on original issue
        if: steps.extract.outputs.validation_passed == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## ‚ùå Blog Post Creation Failed

            Hello @${{ github.event.issue.user.login }},
            
            The automated system encountered validation errors while trying to create your blog post.
            
            ### üö´ Missing Required Information:
            
            ```diff
            ${{ steps.extract.outputs.validation_errors }}
            ```
            
            ### üìä Validation Status:
            
            | Field | Status | Notes |
            |-------|--------|-------|
            | Title | ${{ !contains(steps.extract.outputs.validation_errors, 'Title') && '‚úÖ Present' || '‚ùå MISSING' }} | Must have a blog title |
            | Author | ${{ !contains(steps.extract.outputs.validation_errors, 'Author') && '‚úÖ Present' || '‚ùå MISSING' }} | Author name is required |
            | Tags | ${{ !contains(steps.extract.outputs.validation_errors, 'Tags') && '‚úÖ Present' || '‚ùå MISSING' }} | At least one tag is required |
            | Category | ${{ !contains(steps.extract.outputs.validation_errors, 'Category') && '‚úÖ Present' || '‚ùå MISSING' }} | Blog category is required |
            | Audience | ${{ !contains(steps.extract.outputs.validation_errors, 'Audience') && '‚úÖ Present' || '‚ùå MISSING' }} | Target audience must be specified |
            | Key Value Proposition | ${{ !contains(steps.extract.outputs.validation_errors, 'Key Value Proposition') && '‚úÖ Present' || '‚ùå MISSING' }} | Required for SEO |
            | Keywords | ${{ !contains(steps.extract.outputs.validation_errors, 'Keywords') && '‚úÖ Present' || '‚ùå MISSING' }} | Required for search indexing |
            | Description | ${{ !contains(steps.extract.outputs.validation_errors, 'Description') && '‚úÖ Present' || '‚ùå MISSING' }} | Blog description is required |
            
            ### üìã Next Steps:
            
            1. Edit your issue to add the missing information marked with ‚ùå above
            2. Each of these fields should be under their respective section headers (e.g., `### Author`)
            3. Once all required fields are provided, the system will automatically process your request again
            
            ### üìù Example Common Errors:
            
            1. **Missing Titles**: Please ensure you have typed out your title correctly in the correct location
            2. **Incorrect Placement of Values**: Please double check your response to ensure each value has the correct information and inputs are in the correct areas.
            
            Thank you for your understanding!
          reactions: '-1'

      - name: Create success comment on original issue
        if: steps.extract.outputs.validation_passed == 'true' && steps.extract.outputs.create_pr == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ## Blog Post Created Successfully - ${{ steps.extract.outputs.current_date }}

            Hello @${{ github.event.issue.user.login }},
            
            A pull request has been created with your blog post titled: **${{ steps.extract.outputs.blog_title }}**
            
            ### üìã Next Steps
            
            Please continue working on the blog via the pull request. You can:
            
            1. **Review the metadata** carefully for any mistakes or adjustments needed
            2. **Edit the content** in the Markdown files to complete your blog post
            3. **Request reviews** from team members when ready
            4. **Address any feedback** before final publication

            ### üîç Helpful Resources:
            
            - [GitHub Markdown Guide](https://guides.github.com/features/mastering-markdown/)
            - [Getting Started with Markdown](https://www.markdownguide.org/getting-started/)
            - [Markdown Cheatsheet](https://www.markdownguide.org/cheat-sheet/)
            - [Markdown Syntax Guide](https://www.markdownguide.org/basic-syntax/)
            - [MyST Markdown Guide](https://mystmd.org/guide/quickstart-myst-markdown)
            
            ### üîÑ Workflow Information:
            
            - Review the Markdown file for any mistakes / review the auto-generated content
            - You can continue to edit files directly in this PR, changes will automatically update in the PR preview
            - When ready for review, get in contact with the proper reviewers and add the appropriate labels
            - When the reviewers are done and the blog is ready to go, we will push your blog to live
            
            [View the Pull Request #${{ steps.cpr.outputs.pull-request-number }}](${{ steps.cpr.outputs.pull-request-url }})
            
            Thank you for your submission!
          reactions: '+1'

      - name: Create Pull Request with Blog
        id: cpr
        if: steps.extract.outputs.validation_passed == 'true' && steps.extract.outputs.create_pr == 'true'
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          token: "${{ secrets.ROCM_BLOG_PAT }}"
          commit-message: "${{ github.event.issue.title }}"
          author: "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          title: "${{ github.event.issue.title }}"
          labels: Blog Creation
          body: |
            ## üìù Blog Post Pull Request
            
            Hello @${{ github.event.issue.user.login }}, 
            
            This is the pull request for your blog post based on [issue #${{ github.event.issue.number }}](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}). The automated system has created the initial blog structure for you.
            
            ### üìã Next Steps
            
            Please continue working on the blog via the pull request. You can:
            
            - [ ] **Review the metadata** carefully for any mistakes or adjustments needed
            - [ ] **Edit the content** in the Markdown files to complete your blog post
            - [ ] **Request reviews** from team members when ready
            - [ ] **Address any feedback** before final publication
            
            ### ‚úÖ Content Checklist:

            - [ ] Content follows [ROCm Tech Blogs Style Guide](https://confluence.amd.com/display/DCGPUPM/ROCm+Tech+Blogs%3A+Mission%2C+Stakeholders%2C+Processes%2C+Style+and+Metadata)
            - [ ] Post aligns with [Diataxis framework](https://diataxis.fr/) guidelines
            - [ ] All images/diagrams are properly attributed and have alt text
            - [ ] Code samples (if any) are tested and properly formatted
            - [ ] Technical accuracy verified
            - [ ] No confidential information included
            - [ ] Reviewed recently published blog posts and existing Pull Requests to confirm there are no published or in-flight posts on this same topic

            ### ‚úÖ Signoffs and aprovals

            Please complete the steps below to the best of your ability. This section **must be completed** before publishing.
            
            - [ ] **Technical reviewer approval**
            - [ ] **Editorial team approval**
            - [ ] **Thumbnail:** Thumbnail image for blog post included in PR
            - [ ] **Post description:** Provide a 2-3 line summary that grabs the reader's attention:
            
            ### ‚úÖ Blog author/team signoffs
            
            - [ ] **Legal self review:** AMD Employees only ‚Äì confirm legal self review is complete. [Legal self review traffic lights completed](https://amdcloud.sharepoint.com/sites/amd-legal/Shared%20Documents/Forms/AllItems.aspx?sortField=Modified&isAscending=false&id=%2Fsites%2Famd%2Dlegal%2FShared%20Documents%2FDisclaimer%20and%20Notices%2Epdf&viewid=71efe44a%2D19a2%2D4b81%2D83df%2D05ab2f7ffa73&parent=%2Fsites%2Famd%2Dlegal%2FShared%20Document). Remove this line if not applicable.
            - [ ] **Legal Review** If the blog contains any performance gains, do you have legal clearance?
            - [ ] **License check:** Ensure that any licenses included with your content are correct
            - [ ] **Post-review changes:** Confirm that changes from technical review and editorial feedback have been made
            - [ ] All sections above are completed
            - [ ] Content is in final draft state
            - [ ] Images/assets are optimized and properly placed
            - [ ] Linter checks are passing
            
            ---
            
            Generated By: [GitHub Issue #${{ github.event.issue.number }}](https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }})  
            Creation Date: ${{ steps.extract.outputs.current_date }}
            Corresponding Jira Ticket: ${{ steps.extract.outputs.jira_ticket }}
          branch: ${{ github.actor }}-${{ github.event.issue.number }}
