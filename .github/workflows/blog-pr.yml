name: Auto Create Blog Post PR

on:
  issues:
    types: [opened]

jobs:
  create-blog-pr:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[Blog Post]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract Inputs from Issue Body and Create Blog Post
        id: extract
        shell: bash
        run: |
          pip install numpy
          
          # Save the issue body into a variable
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "Issue body:"
          echo "$ISSUE_BODY"

          # Parse each field from the issue body using grep and sed.
          extract_field() {
            local header="$1"
            echo "$ISSUE_BODY" | sed -n "/### ${header}/{
              n
              :a
              /^[[:space:]]*\$/ {
                n
                ba
              }
              p
              q
            }" | xargs
          }

          BLOG_TITLE=$(extract_field "Blog Title")
          BLOG_RELEASE_DATE=$(extract_field "Blog Release Date")
          BLOG_AUTHORS=$(extract_field "Blog Author(s)")
          BLOG_TAGS=$(extract_field "Blog Tags")
          BLOG_CATEGORY=$(extract_field "Blog Category")
          BLOG_AUDIENCE=$(extract_field "Blog Audience")
          BLOG_KVP=$(extract_field "Blog Key Value Proposition")
          BLOG_KEYWORDS=$(extract_field "Blog Keywords")
          BLOG_AMD_TECHNICAL_BLOG_TYPE=$(extract_field "Blog AMD Technical Blog Type")
          BLOG_AMD_PRODUCT_TYPE=$(extract_field "Blog AMD Product Type")
          BLOG_AMD_DEVELOPER_TYPE=$(extract_field "Blog AMD Developer Type")
          BLOG_AMD_APPLICATIONS=$(extract_field "Blog AMD Applications")
          BLOG_AMD_INDUSTRIES=$(extract_field "Blog AMD Industries")
          
          echo "Blog Title: $BLOG_TITLE"
          echo "Blog Release Date: $BLOG_RELEASE_DATE"
          echo "Blog Author(s): $BLOG_AUTHORS"
          echo "Blog Tags: $BLOG_TAGS"
          echo "Blog Category: $BLOG_CATEGORY"
          echo "Blog Audience: $BLOG_AUDIENCE"
          echo "Blog Key Value Proposition: $BLOG_KVP"
          echo "Blog Keywords: $BLOG_KEYWORDS"
          echo "Blog AMD Technical Blog Type: $BLOG_AMD_TECHNICAL_BLOG_TYPE"
          echo "Blog AMD Product Type: $BLOG_AMD_PRODUCT_TYPE"
          echo "Blog AMD Developer Type: $BLOG_AMD_DEVELOPER_TYPE"
          echo "Blog AMD Applications: $BLOG_AMD_APPLICATIONS"
          echo "Blog AMD Industries: $BLOG_AMD_INDUSTRIES"

          # Run the blog post creation script.
          python3 create_blog_post.py "$BLOG_TITLE" "$BLOG_RELEASE_DATE" "$BLOG_AUTHORS" "$BLOG_TAGS" "$BLOG_CATEGORY" "$BLOG_AUDIENCE" "$BLOG_KVP" "$BLOG_KEYWORDS" "$BLOG_AMD_TECHNICAL_BLOG_TYPE" "$BLOG_AMD_PRODUCT_TYPE" "$BLOG_AMD_DEVELOPER_TYPE" "$BLOG_AMD_APPLICATIONS" "$BLOG_AMD_INDUSTRIES"

          # Set the blog title as an output for use in later steps.
          echo "blog_title=$BLOG_TITLE" >> $GITHUB_OUTPUT

      - name: Create Pull Request with Blog
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          commit-message: (Python) Auto Code Format
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>   
          title:  "Python Auto format for ${{ github.event.pull_request.number }}"
          body: |
            Auto-Generated Pull Request 
            @${{ github.event.pull_request.user.login }} please merge this PR to fix some python linting errors. Not all errors are automatically fixable.
            Relates to #${{ github.event.pull_request.number }}
          reviewers: "Saad Rahim (AMD) <44449863+saadrahim@users.noreply.github.com>"
          maintainer-can-modify: true
          labels: Backend
          branch: python-code-format-${{ github.event.pull_request.number }}
          base: ${{ github.head_ref }}
